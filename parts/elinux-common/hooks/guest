#!/bin/bash
#

# Here are variables initiated by load_and_run script:
#
#  - PART_NAME
#  - PART_DIR
#
# Here are variables initiated by apply_parts command,
# stored in ${WORK_DIR}/env.bash
# 
#  - AD_BUILD_WORK_TOPDIR           , e.g. /tmp/elinux-tools/apply_parts_20170409164024
#  - AD_BUILD_WORK_DEBIAN_PKG_LIST  , e.g. /tmp/elinux-tools/apply_parts_20170409164024/package-debian.txt
#  - AD_BUILD_WORK_PYTHON2_PKG_LIST , e.g. /tmp/elinux-tools/apply_parts_20170409164024/package-python2.txt
#  - AD_BUILD_WORK_PYTHON3_PKG_LIST ' e.g. /tmp/elinux-tools/apply_parts_20170409164024/package-python3.txt
#  - CLI_DIR
#  - ELINUX_TOOLS_DIR
#
#  (Following variables are retrieved from ${ARCHIVE_DIR}/rootfs.yaml)
#  - BOARD_DIST_CODENAME   bone, raspbian, ...
#  - DIST_CODENAME         trusty, jessie, ...
#  - DIST_NAME             ubuntu, debian, ...
#  - KERNEL_ARCHITECTURE   armv7l
#  - KERNEL                linux
#  - KERNEL_VERSION        4.1.17-ti-rt-r47
#
#  (Following variables are retrieved from the config.json passed to apply_parts subcommand, all are optional)
#  - BOARD                 bbgw, bbg, piz, pizw, ...
#  - BOARD_ENV             production, testing, development, ...
#  - BOARD_PROFILE         abc, def, spider, ...
#
# 

function cat_no_comments {
	cat $1 | grep -v "^#" | grep -v "^$"
}


function generate_package_list {
cat <<__EOF__ > $2
$(cat $1)
$([ -f "${AD_BUILD_WORK_PYTHON2_PKG_LIST}" ] && [ "0" != "$(cat_no_comments ${AD_BUILD_WORK_PYTHON2_PKG_LIST} | wc -l)" ] && echo python-pip python-dev)
$([ -f "${AD_BUILD_WORK_PYTHON3_PKG_LIST}" ] && [ "0" != "$(cat_no_comments ${AD_BUILD_WORK_PYTHON3_PKG_LIST} | wc -l)" ] && echo python3-pip python-dev)
__EOF__
}


function install_debian_packages {
	local PKG_FILE=$1
	local DEB_CACHE_CONF="/etc/apt/apt.conf.d/99proxy"
	if [ "0" == "$(cat_no_comments ${PKG_FILE} | wc -l)" ]; then
		INFO "no need to update debian/ubuntu packages"
		return 0
	fi
	if [ "undefined" != "${ELINUX_COMMON_PACKAGE_CACHE_SERVER}" ]; then
		# NO_TAB="true" run_my_cmd "apt-get update" || return $?
		# NO_TAB="true" run_my_cmd "apt-get install -y squid-deb-proxy-client" || return $?
		echo "Acquire::http { Proxy \"http://${ELINUX_COMMON_PACKAGE_CACHE_SERVER}\"; };" > ${DEB_CACHE_CONF}
		[ -f "${DEB_CACHE_CONF}" ] && INFO "${DEB_CACHE_CONF}:" && cat ${DEB_CACHE_CONF}
	fi

	NO_TAB="true" run_my_cmd "apt-get update" || return $?

	if [ "true" == "${ELINUX_COMMON_DEBIAN_APT_FAST_ENABLED}" ]; then
		local APT_GET="apt-fast"
		INFO "installing apt-fast ..."
		if ! dpkg-query --show aria2 >/dev/null 2>&1; then
			NO_TAB="true" run_my_cmd "apt-get install aria2 realpath -y" || return $?
		fi
		wget https://raw.githubusercontent.com/ilikenwf/apt-fast/master/apt-fast -O /usr/local/sbin/apt-fast
		chmod +x /usr/local/sbin/apt-fast
		[ ! -f "/etc/apt-fast.conf" ] && wget https://raw.githubusercontent.com/ilikenwf/apt-fast/master/apt-fast.conf -O /etc/apt-fast.conf
		echo "DOWNLOADBEFORE=true" >> /etc/apt-fast.conf
		echo "_MAXNUM=20" >> /etc/apt-fast.conf
		echo "_MAXCONPERSRV=10" >> /etc/apt-fast.conf
	else
		local APT_GET="apt-get"
	fi

	NO_TAB="true" run_my_cmd "${APT_GET} install -y $(cat_no_comments ${PKG_FILE} | tr '\n' ' ')"

	NO_TAB="true" run_my_cmd "rm -f ${DEB_CACHE_CONF}"
}


function install_python_packages {
	local PY_VERSION=$1
	local PY_PKG_FILE=$2
	local PY_CACHE_OPTS=""
	[ ! -f "${PY_PKG_FILE}" ] && return 1

	local TMP_FILE=$(mktemp /tmp/XXXXXX)
	cat_no_comments	${PY_PKG_FILE} > ${TMP_FILE}
	[ "0" == "$(cat ${TMP_FILE} | wc -l)" ] && rm -f ${TMP_FILE} && INFO "no need to install ${PY_VERSION} packages" && return 0

	local PIP="pip"
	local EASY_INSTALL="easy_install"
	local CACHE_OPTS=""
	[ "python3" == "${PY_VERSION}" ] && PIP="pip3" && EASY_INSTALL="easy_install3"
	
	# [todo] Add pipy to https://github.com/muccg/docker-squid-deb-proxy
	# 
	# Although squid proxy (docker-squid-deb-proxy) is used, its cache list
	# doesn't have `pypi.python.org` in the list:
	#
	#    https://github.com/muccg/docker-squid-deb-proxy/tree/master/etc/squid-deb-proxy/mirror-dstdomain.acl.d
	# 
	# So, it's necessary to add pypi.python.org, and rebuild docker image
	# to run. Then, following cache option can take effect with new docker
	# image.
	#
	[ "undefined" != "${ELINUX_COMMON_PACKAGE_CACHE_SERVER}" ] && CACHE_OPTS="--proxy http://${ELINUX_COMMON_PACKAGE_CACHE_SERVER}"
	
	run_my_cmd "${EASY_INSTALL} --version"
	NO_TAB="true" run_my_cmd "${PIP} install ${CACHE_OPTS} --upgrade setuptools"
	NO_TAB="true" run_my_cmd "${PIP} install ${CACHE_OPTS} $(cat ${TMP_FILE} | tr '\n' ' ')"
	local EXIT_CODE=$?
	rm -f ${TMP_FILE}
	return ${EXIT_CODE}
}


function install_all_packages {
	local TMP_FILE=$(mktemp /tmp/XXXXXX)
	generate_package_list ${AD_BUILD_WORK_DEBIAN_PKG_LIST} ${TMP_FILE}

	local EXIT_CODE="0"

	if [ "0" != "$(cat ${TMP_FILE} | wc -l)" ]; then
		case "${DIST_NAME}" in
			ubuntu|debian)
				install_debian_packages ${TMP_FILE}
				EXIT_CODE=$?; [ "0" != "${EXIT_CODE}" ] && return ${EXIT_CODE}
				;;
			*)
				ERR "unsupported linux distribution: ${DIST_NAME}"
				return 1
				;;
		esac
	fi
	rm -f ${TMP_FILE}

	install_python_packages python2 ${AD_BUILD_WORK_PYTHON2_PKG_LIST}
	install_python_packages python3 ${AD_BUILD_WORK_PYTHON3_PKG_LIST}
}


function run_service_useradd {
	local DIR=$1
	INFO "run_service_useradd: ${DIR}"
	local FILES=($(find ${DIR} -type f))
	export COMMAND_VERBOSE_TAB=true
	for file in "${FILES[@]}"; do
		local USER=$(basename ${file})
		local USER_HOME="/home/${USER}"
		local USER_SSH="${USER_HOME}/.ssh"
		local SUDOER_FILE="/etc/sudoers"
		INFO "adding user $(LIGHT_GREEN ${USER}) ..."
		if [ ! -d "${USER_HOME}" ]; then
			run_my_cmd "useradd -m -d ${USER_HOME} -s /bin/bash ${USER}"
			[ "0" != "$?" ] && ERR "failed to create user ${USER}" && continue
		fi
		[ ! -d "${USER_SSH}" ] && run_my_cmd "mkdir -p ${USER_SSH}"
		run_my_cmd "chown ${USER}:${USER} ${USER_SSH}"
		run_my_cmd "chmod 0700 ${USER_SSH}"
		run_my_cmd "cat ${file} | grep -v '^#' >> ${USER_SSH}/authorized_keys"
		run_my_cmd "chmod 0600 ${USER_SSH}/authorized_keys"
		run_my_cmd "chown ${USER}:${USER} ${USER_SSH}/authorized_keys"
		[ "" == "$(cat ${file} | grep -v '^###!!SUDOER')" ] && continue
		[ "" != "$(cat ${SUDOER_FILE} | grep -v '^#' | grep ${USER})" ] && continue
		run_my_cmd "echo \"${USER} ALL=(ALL) NOPASSWD: ALL\" >> ${SUDOER_FILE}"
	done
	unset COMMAND_VERBOSE_TAB
	return 0
}


function run_service_hello {
	local DIR=$1
	find ${DIR} -type f | awk '{printf "\t%s\n", $0}'
	return 0
}


function run_all_services {
	local CHROOT_WORK_PART_SERVICE_DIR="${AD_BUILD_WORK_TOPDIR}/${PART_NAME}/services"
	local SERVICES=($(cat ${BASH_SOURCE[0]} | grep "^function run_service_" | awk '{print $2}' | sed 's/^run_service_//g'))
	for service in "${SERVICES[@]}"; do
		local SERVICE_DIR="${CHROOT_WORK_PART_SERVICE_DIR}/${service}"
		[ ! -d "${SERVICE_DIR}" ] && continue
		INFO "service: ${service}"
		run_service_${service} ${SERVICE_DIR}
		local EXIT_CODE=$?
		[ "0" != "${EXIT_CODE}" ] && ERR "failed to run ${service} service, exit: ${EXIT_CODE}" && return ${EXIT_CODE}
	done
	return 0
}


function run_helper_change_timezone {
	[ "undefined" == "${ELINUX_COMMON_TIMEZONE}" ] && INFO "ignore timezone setting" && return 0
	case "${DIST_NAME}" in
		ubuntu|debian)
			run_my_cmd "echo \"${ELINUX_COMMON_TIMEZONE}\" > /etc/timezone" || return $?
			run_my_cmd "dpkg-reconfigure --frontend noninteractive tzdata" || return $?
			;;
		*)
			ERR "unsupported distribution for changing timezone: ${DIST_NAME}"
			return 1
			;;
	esac
	return 0
}


function run_all_helpers {
	local HELPERS=($(cat ${BASH_SOURCE[0]} | grep "^function run_helper_" | awk '{print $2}' | sed 's/^run_helper_//g'))
	for helper in "${HELPERS[@]}"; do
		INFO "helper: ${helper}"
		run_helper_${helper} $@
		local EXIT_CODE=$?
		[ "0" != "${EXIT_CODE}" ] && ERR "failed to run ${helper} helper, exit: ${EXIT_CODE}" && return ${EXIT_CODE}
	done
	return 0
}



function generate_part_bash_env {
cat <<__EOF__ > $2
## Derived from ${ENV_BASH}
#
$(cat ${ENV_BASH})

## Merged from ${AD_BUILD_WORK_PARTS_DIR}/$1.env.bash
#
$(cat ${AD_BUILD_WORK_PARTS_DIR}/$1.env.bash)
__EOF__
}


function run_other_chroot_entries {
	local PARTS=($(cat ${AD_BUILD_WORK_PARTS_FILE}))
	# cat ${ENV_BASH} | awk '{printf "\t%s\n", $0}'
	for part in "${PARTS[@]}"; do
		[ "${part}" == "${PART_NAME}" ] && continue
		local NEW_ENV_FILE="/tmp/${part}.env.bash"
		local CMD="$0 ${NEW_ENV_FILE} ${part} guest chroot_entry"
		generate_part_bash_env ${part} ${NEW_ENV_FILE}
		INFO "$(YELLOW ${CMD})"
		ELINUX_COMMON_GUEST_LOADER=${PART_NAME} ${CMD}
		local EXIT_CODE=$?
		rm -f ${NEW_ENV_FILE}
		[ "0" != "${EXIT_CODE}" ] && ERR "failed to run chroot_entry() of ${part}, exit: ${EXIT_CODE}" && return ${EXIT_CODE}
	done
	return 0
}


function show_rootfs_sizes {
	[ "true" == "${DRY_RUN}" ] && return 0
	local TMP_FILE=$(mktemp /tmp/XXXXXX)
	du -s -m /* 2>${TMP_FILE} | grep -v "/tmp" | grep -v "/work" | awk '{printf "\t%s\n", $0}'
	local EXIT_CODE=$?
	[ "0" == "${EXIT_CODE}" ] && rm -f ${TMP_FILE} && return 0
	cat ${TMP_FILE}
	rm -f ${TMP_FILE}
	return ${EXIT_CODE}
}


function cleanup_package_caches {
	INFO "before package-cache cleanup"
	show_rootfs_sizes

	case "${DIST_NAME}" in
		ubuntu|debian)
			[ -f "/etc/apt/apt.conf.d/99proxy" ] && run_my_cmd "rm -f /etc/apt/apt.conf.d/99proxy"
			run_my_cmd "apt-get clean -y -q"
			run_my_cmd "apt-get autoclean -y -q"
			;;
		*)
			ERR "unsupported distribution ${DIST_NAME} for cleanup_package_caches"
			;;
	esac

	run_my_cmd "find /var/lib/apt -type f | xargs -I{} sh -c \"rm -vf {}\""
	run_my_cmd "rm -rvf /var/tmp/*"

	INFO "after package-cache cleanup"
	show_rootfs_sizes
}


function dump_all_information {
cat <<__EOF__
tzdata: $(apt-cache show tzdata | grep Version | head -n1 | awk '{print $2}')
tz: $(cat /etc/timezone)
__EOF__
}


#
# The chroot_entry (guest script) running inside qemu with chroot,
# is invoked after following services are performed:
#
#	- elinux-common/run_all_services
#	  # useradd
#	    find ${AD_BUILD_WORK_TOPDIR}/elinux-common/services/useradd/*
#		apply user-add function on each found file
#
# Please note, following variables derived from parent process `emb_apply_parts`
# are reloaded from the generated `env.bash`. These variables are reloaded as 
# relative path in chroot:
# 
#  - AD_BUILD_WORK_TOPDIR
#  - AD_BUILD_WORK_DEBIAN_PKG_LIST
#  - AD_BUILD_WORK_PYTHON2_PKG_LIST
#  - AD_BUILD_WORK_PYTHON3_PKG_LIST
#
#  - CLI_DIR
#  - BASH_UTIL_DIR
#  - ELINUX_TOOLS_DIR
#
function chroot_entry {

	check_environment_variables \
		AD_BUILD_WORK_TOPDIR \
		AD_ROOTFS_DIR \
		AD_BUILD_WORK_DEBIAN_PKG_LIST \
		AD_BUILD_WORK_PYTHON2_PKG_LIST \
		AD_BUILD_WORK_PYTHON3_PKG_LIST \
		AD_BUILD_WORK_PARTS_FILE \
		|| return 1

	show_rootfs_sizes

	install_all_packages || return $?
	run_all_services || return $?
	run_all_helpers || return $?

	run_other_chroot_entries || return $?

	INFO "dump_all_information:"
	dump_all_information | tee /tmp/aaa.yaml | awk '{printf "\t%s\n", $0}'

	cleanup_package_caches || return $?
	INFO "end."
	return 0
}
